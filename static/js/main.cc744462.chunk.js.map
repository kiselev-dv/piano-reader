{"version":3,"sources":["components/PianoKeyboard.js","hooks/useLocalStorage.js","components/MidiSelector.js","lessons/lessons.js","components/LessonsList.js","util/CustomEvent.js","util/Notes.js","components/Stave.js","util/NotesMatcher.js","hooks/useSingleton.js","hooks/useRefCallback.js","components/Game.js","index.js"],"names":["PianoKeyboard","props","firstNote","MidiNumbers","fromNote","lastNote","keyboardShortcuts","KeyboardShortcuts","create","keyboardConfig","HOME_ROW","className","noteRange","first","last","playNote","stopNote","width","keyWidthToHeight","activeNotes","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ActiveInputOptions","activeInput","autoconnectInputIds","setAutoconnectInputIds","connected","onmidimessage","type","checked","includes","id","onChange","push","filter","MidiSelector","notes","inputs","setInputs","setActiveInput","useEffect","navigator","requestMIDIAccess","then","access","onstatechange","e","port","name","manufacturer","state","has","auto","Array","from","values","find","inp","$inputs","map","input","handleOptionSelect","useCallback","get","target","handleMidiMessage","bind","disabled","abcMapper","opts","abc","system","TREBLE_CLEF_MARKERS","TREBLE_CLEF_SPACES","TREBLE_CLEF_LINES","BASS_CLEF_MARKERS","BASS_CLEF_SPACES","BASS_CLEF_LINES","LESSONS","heder","subtitle","grandStave","exercises","split","clef","SimpleLessonListItem","selected","onClick","lesson","LessonsList","onExercisesUpdate","lessonKey","setLessonKey","CEvent","this","listeners","listener","index","indexOf","splice","data","forEach","l","NOTES","activeNotesAsABC","chord","activeAbc","n","octave","char","toLowerCase","repeat","midi2ABC","NotesState","stateChangeEvent","Event","note","fire","msg","command","addNote","removeNote","off","Stave","activeVoice","voices","length","some","v","trebleVoice","bassVoice","voice","activeABC","activeTreble","trebleLine","activeBase","bassLine","line","activeAbcFill","jsx","abcNotation","parserParams","engraverParams","responsive","add_classes","renderParams","viewportHorizontal","debugABC","style","whiteSpace","ABC_NOTE_REGEXP","system2MIDINotes","noteNumbers","concat","matchAll","m","splitABC","sharp","flat","match","isLowercase","octaveUp","octaveDown","number","abc2MIDI","NotesMatcher","matchEvent","hitEvent","missEvent","reset","matchOneByOne","hasChord","_matched","_missed","allMatched","arraysMatch","notesToMatch","matchedActiveNotes","matched","a","b","every","ea","useSingleton","useRef","current","useRefCallback","callback","cbRef","proxyRef","sampleArray","array","skip","result","Math","floor","random","Game","matcher","setActiveNotes","setActiveABC","setLesson","exercise","setExercise","setExercises","showStaveABC","setShowStaveABC","showGrandStave","setShowGrandStave","nextExerciseAwaitsRef","handleActiveNotes","newNotes","newActiveABC","handleExercisesUpdate","newExercise","nextExercise","handleMiss","handleMatch","on","handleScreenKeyboardNoteOn","handleKeyboard","handleScreenKeyboardNoteOff","activeABCFillColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc744462.chunk.js","sourcesContent":["import React from 'react';\nimport { Piano, KeyboardShortcuts, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\n\nexport default function PianoKeyboard(props) {\n\n    // 61 key keyboard\n    const firstNote = MidiNumbers.fromNote('c2');\n    const lastNote = MidiNumbers.fromNote('c7');\n    const keyboardShortcuts = KeyboardShortcuts.create({\n        firstNote: MidiNumbers.fromNote('c4'),\n        lastNote: lastNote,\n        keyboardConfig: KeyboardShortcuts.HOME_ROW,\n    });\n\n    return (\n        <div className=\"piano-container\">\n            <Piano className=\"test\"\n                noteRange={{ first: firstNote, last: lastNote }}\n                playNote={props.playNote}\n                stopNote={props.stopNote}\n                width={props.width}\n                keyWidthToHeight={0.2}\n                keyboardShortcuts={keyboardShortcuts}\n                activeNotes={props.activeNotes}\n            />\n        </div>\n    );\n}","import { useState } from \"react\";\n\n// https://usehooks.com/useLocalStorage/\nexport default function useLocalStorage(key, initialValue) {\n\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    return [storedValue, setValue];\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nfunction MidiSelector({ notes }) {\n    const [inputs, setInputs] = useState();\n    const [activeInput, setActiveInput] = useState();\n    const [autoconnectInputIds] = useLocalStorage('autoconnect-midi-input-ids', []);\n\n    useEffect(() => {\n        navigator.requestMIDIAccess().then(access => {\n            setInputs(access.inputs);\n\n            access.onstatechange = (e) => {\n                console.log(e.port.name, e.port.manufacturer, e.port.state);\n                setInputs(access.inputs);\n            };\n        });\n    }, []);\n\n    useEffect(() => {\n        if (activeInput && !inputs.has(activeInput.id)) {\n            setActiveInput(null);\n        }\n    }, [inputs, activeInput]);\n\n    useEffect(() => {\n        if (!inputs) return;\n\n        const auto = Array.from(inputs.values())\n            .find(inp => autoconnectInputIds.includes(inp.id));\n\n        auto && setActiveInput(auto);\n\n    }, [inputs, autoconnectInputIds])\n\n    const $inputs = Array.from(inputs ? inputs.values() : []).map(input =>\n        <option key={input.id} value={input.id}>\n            {input.name}\n        </option>\n    );\n\n    const handleOptionSelect = useCallback((e) => {\n        setActiveInput(inputs.get(e.target.value));\n    }, [inputs]);\n\n    useEffect(() => {\n        if (!activeInput) return;\n\n        activeInput.onmidimessage = notes.handleMidiMessage.bind(notes);\n\n    }, [ activeInput, notes ]);\n\n    return (\n    <div>\n        <select\n            value={activeInput ? activeInput.id : 'label'}\n            onChange={handleOptionSelect}>\n\n            <option value=\"label\" disabled>Select midi device</option>\n            {$inputs}\n\n        </select>\n        &nbsp;\n        <ActiveInputOptions activeInput={activeInput}></ActiveInputOptions>\n    </div>\n    );\n}\n\nfunction ActiveInputOptions({ activeInput }) {\n    const [autoconnectInputIds, setAutoconnectInputIds] = useLocalStorage('autoconnect-midi-input-ids', []);\n    const connected = activeInput && activeInput.onmidimessage;\n\n    if (!activeInput) return null;\n\n    function handleAutoconnectChange() {\n        const autoconnect = !autoconnectInputIds.includes(activeInput.id);\n\n        if (autoconnect) {\n            if (autoconnectInputIds.includes(activeInput.id)) return;\n\n            autoconnectInputIds.push(activeInput.id);\n            setAutoconnectInputIds(autoconnectInputIds);\n        }\n        else {\n            setAutoconnectInputIds(autoconnectInputIds.filter(id => id !== activeInput.id))\n        }\n    }\n\n    return <span>\n        <label className={connected ? 'connected' : ''}>connected</label>\n        <label>\n            &nbsp;\n            autoconnect\n            &nbsp;\n            <input type=\"checkbox\" checked={autoconnectInputIds.includes(activeInput.id)} onChange={handleAutoconnectChange} />\n        </label>\n    </span>\n}\n\nexport default MidiSelector;","\nexport function abcMapper(opts) {\n    return abc => {\n        return {\n            system: [{...opts, abc: abc}]\n        }\n    };\n}\n\nconst TREBLE_CLEF_MARKERS = \"C G c g c' G,\";\nconst TREBLE_CLEF_SPACES = \"G, B, D E F A c e g b\";\nconst TREBLE_CLEF_LINES = \"A, C E G B d f a c'\";\n\nconst BASS_CLEF_MARKERS = \"C,, F,, C, F, C F\";\nconst BASS_CLEF_SPACES = \"F,, A,, C, E, G, B, D\";\nconst BASS_CLEF_LINES = \"C,, E,, G,, B,, D, F, A, C E\";\n\nexport function generateSingleNoteExercises(clef, subset) {\n    let result = [];\n\n    if (clef === \"treble\" || clef === \"both\") {\n        if (subset === \"markers\" && subset !== \"all\") {\n            result = result.concat(TREBLE_CLEF_MARKERS.split(' ').map(abcMapper({clef: 'treble'})));\n        }\n\n        if (subset === \"spaces\" || subset === \"all\") {\n            result = result.concat(TREBLE_CLEF_SPACES.split(' ').map(abcMapper({clef: 'treble'})));\n        }\n\n        if (subset === \"lines\" || subset === \"all\") {\n            result = result.concat(TREBLE_CLEF_LINES.split(' ').map(abcMapper({clef: 'treble'})));\n        }\n    }\n\n    if (clef === \"bass\" || clef === \"both\") {\n        if (subset === \"markers\" && subset !== \"all\") {\n            result = result.concat(BASS_CLEF_MARKERS.split(' ').map(abcMapper({clef: 'bass'})));\n        }\n\n        if (subset === \"spaces\" || subset === \"all\") {\n            result = result.concat(BASS_CLEF_SPACES.split(' ').map(abcMapper({clef: 'bass'})));\n        }\n\n        if (subset === \"lines\" || subset === \"all\") {\n            result = result.concat(BASS_CLEF_LINES.split(' ').map(abcMapper({clef: 'bass'})));\n        }\n    }\n\n    return result;\n}\n\nconst LESSONS = [{\n    key: \"markers-all\",\n    heder: \"Markers\",\n    subtitle: \"C G / C F\",\n    grandStave: true,\n    exercises: [ ...TREBLE_CLEF_MARKERS.split(' ').map(abcMapper({clef: 'treble'})),\n                 ...BASS_CLEF_MARKERS.split(' ').map(abcMapper({clef: 'bass'}))   ]\n}, {\n    key: \"treble-spaces\",\n    heder: \"Spaces\",\n    subtitle: \"Treble clef\",\n    grandStave: false,\n    exercises: TREBLE_CLEF_SPACES.split(' ').map(abcMapper({clef: 'treble'}))\n}, {\n    key: \"bass-spaces\",\n    heder: \"Spaces\",\n    subtitle: \"Bass clef\",\n    grandStave: false,\n    exercises: BASS_CLEF_SPACES.split(' ').map(abcMapper({clef: 'bass'}))\n}, {\n    key: \"treble-lines\",\n    heder: \"Lines\",\n    subtitle: \"Treble clef\",\n    grandStave: false,\n    exercises: TREBLE_CLEF_LINES.split(' ').map(abcMapper({clef: 'treble'}))\n}, {\n    key: \"bass-lines\",\n    heder: \"Lines\",\n    subtitle: \"Bass clef\",\n    grandStave: false,\n    exercises: BASS_CLEF_LINES.split(' ').map(abcMapper({clef: 'bass'}))\n}, {\n    key: \"treble-all\",\n    heder: \"Treble clef\",\n    subtitle: \"All\",\n    grandStave: false,\n    exercises: [\n        ...TREBLE_CLEF_SPACES.split(' ').map(abcMapper({clef: 'treble'})),\n        ...TREBLE_CLEF_LINES.split(' ').map(abcMapper({clef: 'treble'})), ]\n}, {\n    key: \"bass-all\",\n    heder: \"Bass clef\",\n    subtitle: \"All\",\n    grandStave: false,\n    exercises: [\n        ...BASS_CLEF_SPACES.split(' ').map(abcMapper({clef: 'bass'})),\n        ...BASS_CLEF_LINES.split(' ').map(abcMapper({clef: 'bass'})), ]\n}, {\n    key: \"grand-stave\",\n    heder: \"Grand Stave\",\n    subtitle: \"All\",\n    grandStave: true,\n    exercises: [\n        ...TREBLE_CLEF_SPACES.split(' ').map(abcMapper({clef: 'treble'})),\n        ...TREBLE_CLEF_LINES.split(' ').map(abcMapper({clef: 'treble'})),\n        ...BASS_CLEF_SPACES.split(' ').map(abcMapper({clef: 'bass'})),\n        ...BASS_CLEF_LINES.split(' ').map(abcMapper({clef: 'bass'})), ]\n}, {\n    key: \"chords\",\n    heder: \"Chords\",\n    subtitle: \"\",\n    grandStave: false,\n    exercises: [\"[C E G]\", \"C E G\", \"[F A c]\"].map(abcMapper({clef: 'treble'}))\n}];\n\nexport { LESSONS }","import React, { useEffect, useState } from 'react';\n\nimport { LESSONS } from '../lessons/lessons';\n\nimport './Lessons.css'\n\n/**\n * Lesson representation,\n * without any options\n */\nfunction SimpleLessonListItem({selected, onChange, onClick, lesson}) {\n    useEffect(() => {\n        selected && onChange(lesson.exercises, lesson);\n    }, [selected, lesson, lesson.exercises, onChange]);\n\n    return (\n    <div className={`lesson ${selected ? \"selected\" : \"\"}`} onClick={onClick}>\n        <div className=\"wrapper\">\n            <h4>{lesson.heder}</h4>\n            <div>{lesson.subtitle}</div>\n        </div>\n    </div>\n    );\n}\n\nexport default function LessonsList({ onExercisesUpdate }) {\n\n    const [lessonKey, setLessonKey] = useState(LESSONS[0].key);\n\n    return (\n        <div className=\"lessons\">\n            {LESSONS.map(lesson =>\n            <SimpleLessonListItem\n                key={lesson.key}\n                lesson={lesson}\n                selected={lessonKey === lesson.key}\n                onClick={() => {setLessonKey(lesson.key);}}\n                onChange={onExercisesUpdate}\n            />)\n            }\n        </div>\n    );\n}\n","export default class CEvent {\n    constructor() {\n        this.listeners = [];\n    }\n\n    on(listener) {\n        this.listeners.push(listener);\n    }\n\n    off(listener) {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n\n    fire(...data) {\n        this.listeners.forEach(l => l(...data));\n    }\n};","import Event from './CustomEvent';\n\nconst NOTES = ['C', '^C', 'D', '^D', 'E', 'F', '^F', 'G', '^G', 'A', '^A', 'B'];\n\nexport function midi2ABC(key) {\n    const octave = (key / 12 | 0) - 5;\n    const note = key % 12;\n\n    const char = NOTES[note];\n\n    if (octave === 0) {\n        return char;\n    }\n    if (octave === 1) {\n        return char.toLowerCase();\n    }\n    if (octave > 1) {\n        return char.toLowerCase() + \"'\".repeat(octave - 1);\n    }\n    if (octave < 0) {\n        return char + \",\".repeat(octave * -1);\n    }\n\n    return null;\n}\n\nexport function activeNotesAsABC(notes, chord) {\n    let activeAbc = \"\";\n\n    if (notes) {\n        notes.forEach(n => {\n            activeAbc += midi2ABC(n);\n        });\n    }\n\n    if (activeAbc && chord) {\n        activeAbc = '[' + activeAbc + ']';\n    }\n\n    return activeAbc;\n}\n\nexport default class NotesState {\n    constructor() {\n        this.activeNotes = [];\n        this.stateChangeEvent = new Event();\n    }\n\n    addNote(note) {\n        const index = this.activeNotes.indexOf(note);\n        if (index < 0) {\n            this.activeNotes.push(note);\n        }\n\n        this.stateChangeEvent.fire(this.activeNotes);\n    }\n\n    removeNote(note) {\n        const index = this.activeNotes.indexOf(note);\n        if (index > -1) {\n            this.activeNotes.splice(index, 1);\n        }\n\n        this.stateChangeEvent.fire(this.activeNotes);\n    }\n\n    handleMidiMessage(msg) {\n        const data = msg.data;\n\n        const command = data[0];\n        const note = data[1];\n        // const velocity = (data.length > 2) ? data[2] : 0;\n\n        if (command === 144) {\n            this.addNote(note);\n        }\n\n        if (command === 128) {\n            this.removeNote(note);\n        }\n    }\n\n    handleKeyboard(note, off) {\n        if (!off) {\n            this.addNote(note);\n        }\n        else {\n            this.removeNote(note);\n        }\n    }\n}","import React from 'react';\nimport Abcjs from 'react-abcjs';\n\nimport {activeNotesAsABC} from '../util/Notes'\n\nfunction isDoubleVoices(voices) {\n    return voices.some(v => v.clef === 'bass')\n        && voices.some(v => (v.clef || 'treble') === 'treble' )\n}\n\nexport default function Stave(props) {\n\n    let abc;\n    let activeVoice;\n\n    const {\n        key,\n        system\n    } = props;\n\n    let {clef, grandStave} = props;\n    if (!clef && system.length === 1) {\n        clef = system[0].clef || 'treble';\n    }\n\n    const bothClefs = isDoubleVoices(system);\n\n    if (bothClefs) {\n        grandStave = true;\n    }\n\n    const trebleVoice = system.find( v => (v.clef || clef) === 'treble' );\n    const bassVoice = system.find( v => (v.clef || clef) === 'bass' );\n    const voice = (trebleVoice || bassVoice);\n\n    let activeAbc = props.activeABC || activeNotesAsABC(props.activeNotes);\n\n    if (grandStave) {\n        const activeTreble = clef === 'bass' ? '' : activeAbc;\n        let trebleLine = trebleVoice ? trebleVoice.abc : '';\n        if (trebleVoice && activeTreble) {\n            trebleLine += '&';\n            activeVoice = 1;\n        }\n        trebleLine += activeTreble;\n\n        const activeBase = clef === 'bass' ? activeAbc : '';\n        let bassLine = bassVoice ? bassVoice.abc : '';\n        if (bassVoice && activeBase) {\n            bassLine += '&';\n            activeVoice = 2;\n        }\n        bassLine += activeBase;\n\n        if (!activeAbc) {\n            // Add empty overlay chord to have consistent placing\n            // of elements, otherwise left padding changes,\n            // when you have active notes\n            bassLine += \" & []\"\n        }\n\n        abc = `\n            K: ${key || ''} clef=${clef || 'treble'}\n            L:1/4\n            M:4/4\n            %%staves {V1 V2}\n            V: V1 clef=treble\n            V: V2 clef=bass\n            [V: V1]|| ${trebleLine}\n            [V: V2]|| ${bassLine}\n        `;\n    }\n    else {\n        let line = voice ? voice.abc : '';\n        if (line && activeAbc) {\n            line += '&';\n            activeVoice = 1;\n        }\n        line += activeAbc;\n\n        if(!activeAbc) {\n            line += ' & []';\n        }\n\n        abc = `\n            K: ${key || ''} clef=${clef || 'treble'}\n            L:1/4\n            M:4/4\n            || ${line}\n        `;\n    }\n\n    const activeAbcFill = props.activeAbcFill || \"#3AC8DA\";\n\n    return (\n        <div className=\"stave-container\">\n            <style jsx=\"true\">{`\n                path.abcjs-note.abcjs-v${activeVoice} {\n                    fill: ${activeAbcFill};\n                }\n            `}\n            </style>\n            <Abcjs\n                abcNotation={abc}\n                parserParams={{}}\n                engraverParams={{ responsive: 'none', add_classes: true }}\n                renderParams={{ viewportHorizontal: true }}\n            />\n            { props.debugABC && (<div style={{whiteSpace: 'pre'}}>{abc}</div>)}\n        </div>\n    )\n}\n\n","import CEvent from \"./CustomEvent\";\nimport { activeNotesAsABC } from \"./Notes\";\n\nconst ABC_NOTE_REGEXP = /([_^]?[abcdefgABCDEFG]{1}[,']*)/g;\n\nexport function abc2MIDI(abc) {\n    const sharp = (abc.indexOf('^') > -1);\n    const flat  = (abc.indexOf('_') > -1);\n\n    const note = abc.match(/[ABCDEFGabcdefg]/)[0];\n    const isLowercase = note.toLowerCase() === note;\n\n    const octaveUp   = abc.match(/[']+/) ? abc.match(/[']+/)[0].length : 0;\n    const octaveDown = abc.match(/[,]+/) ? abc.match(/[,]+/)[0].length : 0;\n\n    let number = ['c', 'c', 'd', 'd', 'e', 'f', 'f', 'g', 'g', 'a', 'a', 'b'].indexOf(note.toLowerCase());\n\n    if (sharp) {\n        number ++;\n    }\n\n    if (flat) {\n        number ++;\n    }\n\n    if (isLowercase) {\n        number += 12;\n    }\n\n    number += 12 * octaveUp;\n    number -= 12 * octaveDown;\n\n    number += 12 * 5;\n\n    return number;\n}\n\nexport function system2MIDINotes(system) {\n    let noteNumbers = [];\n\n    if(system) {\n        system.forEach(line => {\n            noteNumbers = noteNumbers.concat(abc2Notes(line.abc));\n        });\n    }\n\n    return noteNumbers;\n}\n\nexport function splitABC(abc) {\n    return [...abc.matchAll(ABC_NOTE_REGEXP)].map(m => m[0]);\n}\n\nexport function abc2Notes(abc) {\n    return splitABC(abc).map(n => abc2MIDI(n));\n}\n\nexport default class NotesMatcher {\n    constructor(system) {\n\n        this.matchEvent = new CEvent();\n        this.hitEvent = new CEvent();\n        this.missEvent = new CEvent();\n\n        if (system) {\n            this.reset(system);\n        }\n    }\n\n    reset(system) {\n        this.system = system;\n        this.notes = system2MIDINotes(this.system);\n\n        this.matchOneByOne = !hasChord(this.system);\n\n        this._matched = [];\n        this._missed = [];\n    }\n\n    setActiveNotes(activeNotes) {\n\n        // If we are matching chord,\n        // all of the chord notes should be pressed\n        // at once.\n        // So we don't keep state ( this._matched )\n        if (!this.matchOneByOne) {\n            this._matched = [];\n        }\n\n        let allMatched = arraysMatch(this.notes, this._matched);\n\n        // We already have match, but state haven't\n        // been reset yet\n        if (allMatched) {\n            this.matchEvent.fire(this.notes);\n        }\n\n        // Notes which haven't been matched yet\n        let notesToMatch = this.notes.filter(n => !this._matched.includes(n));\n\n        // I we are matching notes one by one,\n        // take the next one after matched\n        if (this.matchOneByOne && !allMatched) {\n            if (this.notes.length > 0 && this._matched.length < this.notes.length) {\n                notesToMatch = [this.notes[this._matched.length]]\n            }\n        }\n\n        this._missed = activeNotes.filter(n => !notesToMatch.includes(n));\n\n        if (this._missed.length !== 0) {\n            this.missEvent.fire(this._missed);\n        }\n\n        const matchedActiveNotes = activeNotes.filter(n => notesToMatch.includes(n));\n        if (!allMatched && matchedActiveNotes.length > 0) {\n            this.hitEvent.fire(matchedActiveNotes);\n        }\n\n        // Update inner state\n        matchedActiveNotes.forEach(n => this._matched.push(n));\n\n        allMatched = arraysMatch(this.notes, this._matched);\n        if (allMatched && this._missed.length === 0) {\n            this.matchEvent.fire(this._matched);\n        }\n    }\n\n    activeNotesAsABC(activeNotes) {\n        const showAsChord = !this.matchOneByOne || this.notes.length <= 1;\n        return activeNotesAsABC(activeNotes, showAsChord);\n    }\n\n    match(activeNotes) {\n        let matched = [];\n\n        // All active notes are in lesson notes\n        for (let n of activeNotes) {\n            if(this.notes.indexOf(n) >= 0) {\n                matched.push(n);\n            }\n        }\n\n        // All notes are matched\n        return matched.length === activeNotes.length\n            && matched.length === this.notes.length;\n    }\n}\n\nfunction arraysMatch(a, b) {\n    return a.length === b.length && a.every(ea => b.includes(ea));\n}\n\nfunction hasChord(system) {\n    return system.some(line => line.abc.includes(\"[\") )\n}\n","import { useRef } from \"react\";\n\nexport default function useSingleton(value) {\n    const ref = useRef(value);\n    return ref.current;\n}","import { useRef } from \"react\";\n\n/**\n * This hook returns persistent function,\n * which proxy calls to mutable\n * callback.\n *\n * That's useful for registering event handlers\n * when you have to register callback just once\n * but closured values have to change for callback\n *\n * @example\n *  const [stateVar, setStateVar] = useState(0);\n *\n *  const myCallback = useRefCallback(() => {\n *    // stateVar value is in closure, and should be updated\n *    // on each function call\n *    setStateVar(stateVar + 1);\n *  });\n *\n *  // myCallback is persistent, so it will not cause unnecessary\n *  // re-renders and you can use it as a callback for events,\n *  // allowing multiple callback registrations, hence requiring\n *  // your particular callback being registered just once, but\n *  // not on each component re-render.\n *\n *  // Note that myCallback is persistent between renders,\n *  // but values in closures - are updated each render call.\n *\n *  useEffect(() => {\n *    someEvent.addEventHandler(myCallback);\n *  }, [myCallback]);\n *\n*/\nexport default function useRefCallback(callback) {\n\n    const cbRef = useRef();\n    cbRef.current = callback;\n\n    const proxyRef = useRef((...args) => {\n        return cbRef.current(...args);\n    });\n\n    return proxyRef.current;\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nimport PianoKeyboard from './PianoKeyboard';\nimport MidiSelector from './MidiSelector';\nimport LessonsList from './LessonsList';\nimport Stave from './Stave';\n\nimport NotesState from '../util/Notes';\nimport NotesMatcher from '../util/NotesMatcher';\nimport useSingleton from '../hooks/useSingleton';\nimport useRefCallback from '../hooks/useRefCallback';\n\nfunction sampleArray(array, skip) {\n    const result = array[Math.floor(Math.random() * array.length)];\n\n    if (skip && array.length > 1 && result === skip) {\n        return sampleArray(array, skip);\n    }\n\n    return result;\n}\n\nexport default function Game() {\n    const notes = useSingleton(new NotesState());\n    const matcher = useSingleton(new NotesMatcher());\n\n    const [activeNotes, setActiveNotes] = useState([]);\n    const [activeABC, setActiveABC] = useState();\n\n    const [lesson, setLesson] = useState();\n    const [exercise, setExercise] = useState();\n    const [exercises, setExercises] = useState();\n\n    const [showStaveABC, setShowStaveABC] = useState(false);\n    const [showGrandStave, setShowGrandStave] = useState(false);\n\n    const nextExerciseAwaitsRef = useRef(false);\n\n    const handleActiveNotes = useRefCallback(newNotes => {\n        matcher.setActiveNotes(newNotes);\n        const newActiveABC = matcher.activeNotesAsABC(newNotes);\n\n        setActiveNotes(newNotes);\n        setActiveABC(newActiveABC);\n    });\n\n    const handleExercisesUpdate = useRefCallback((exercises, lesson) => {\n        nextExerciseAwaitsRef.current = false;\n\n        const newExercise = sampleArray(exercises, exercise);\n        setLesson(lesson);\n        setExercises(exercises);\n        setExercise(newExercise);\n\n        matcher.reset(newExercise.system);\n    });\n\n    const nextExercise = useRefCallback(() => {\n        nextExerciseAwaitsRef.current = false;\n\n        const newExercise = sampleArray(exercises, exercise);\n\n        setExercise(newExercise);\n        matcher.reset(newExercise.system);\n    });\n\n    const handleMiss = useRefCallback(() => {\n\n    });\n\n    const handleMatch = useRefCallback(() => {\n        nextExerciseAwaitsRef.current = true;\n    });\n\n    // Register events callback for non react components\n    useEffect(() => {\n        notes.stateChangeEvent.on(handleActiveNotes);\n        matcher.matchEvent.on(handleMatch);\n        matcher.missEvent.on(handleMiss);\n    }, [notes.stateChangeEvent, matcher.matchEvent, matcher.missEvent, handleActiveNotes, handleMatch, handleMiss]);\n\n    useEffect(() => {\n        if( nextExerciseAwaitsRef.current && activeNotes.length === 0) {\n            nextExercise();\n        }\n    });\n\n    const handleScreenKeyboardNoteOn = useCallback(note => {\n        notes.handleKeyboard(note, false);\n    }, [ notes ]);\n\n    const handleScreenKeyboardNoteOff = useCallback(note => {\n        notes.handleKeyboard(note, true);\n    }, [ notes ]);\n\n    const activeABCFillColor = nextExerciseAwaitsRef.current ? \"#30C72C\" : \"#3AC8DA\";\n\n    return (\n        <div id=\"game\">\n            <MidiSelector notes={ notes }/>\n            <div>\n                &nbsp;<input\n                    type=\"checkbox\"\n                    onChange={e => {setShowStaveABC(e.target.checked);}}></input>\n                &nbsp;<label>Show stave ABC</label>\n                &nbsp;<input\n                    type=\"checkbox\"\n                    onChange={e => {setShowGrandStave(e.target.checked);}}></input>\n                    &nbsp;<label>Show Grand Stave</label>\n                &nbsp;\n                <button\n                    style={{\"width\": \"100px\"}}\n                    onClick={nextExercise} >\n                        Skip exercise\n                </button>\n            </div>\n\n            <LessonsList onExercisesUpdate={handleExercisesUpdate} />\n\n            { exercise &&\n            <Stave\n                activeABC={activeABC}\n                activeAbcFill={ activeABCFillColor }\n                grandStave={(lesson && lesson.grandStave) || showGrandStave}\n                system={exercise.system}\n                debugABC={showStaveABC}/>\n            }\n\n            <PianoKeyboard width={1600}\n                activeNotes={activeNotes}\n                playNote={handleScreenKeyboardNoteOn}\n                stopNote={handleScreenKeyboardNoteOff}\n            />\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport Game from './components/Game'\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}