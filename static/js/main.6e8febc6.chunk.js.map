{"version":3,"sources":["components/PianoKeyboard.js","components/MidiSelector.js","components/LessonsList.js","util/CustomEvent.js","util/Notes.js","components/Stave.js","lessons/lessons.js","util/NotesMatcher.js","components/Game.js","index.js"],"names":["PianoKeyboard","props","firstNote","MidiNumbers","fromNote","lastNote","keyboardShortcuts","KeyboardShortcuts","create","keyboardConfig","HOME_ROW","className","noteRange","first","last","playNote","stopNote","width","keyWidthToHeight","activeNotes","MidiSelector","state","value","options","navigator","requestMIDIAccess","then","gainAccess","bind","handleChange","connect","access","this","setInputs","inputs","self","onstatechange","e","console","log","port","name","manufacturer","values","input","push","key","id","text","setState","onConnect","getSelectedInput","event","target","items","forEach","opt","defaultValue","onChange","disabled","createSelectItems","onClick","React","Component","LessonListItem","lesson","selected","heder","subtitle","LessonsList","selectedLesson","lessons","onSelect","$lessons","map","index","CEvent","listeners","listener","indexOf","splice","data","l","NOTES","activeNotesAsABC","notes","chord","activeAbc","n","octave","char","toLowerCase","repeat","midi2ABC","NotesState","stateChangeEvent","Event","note","fire","msg","command","addNote","removeNote","off","abc","activeVoice","voices","system","clef","grandStave","length","some","v","trebleVoice","find","bassVoice","voice","activeABC","activeTreble","trebleLine","activeBase","bassLine","line","activeAbcFill","jsx","abcNotation","parserParams","engraverParams","responsive","add_classes","renderParams","viewportHorizontal","renderABC","style","whiteSpace","abcMapper","opts","LESSONS","createExercises","split","ABC_NOTE_REGEXP","system2MIDINotes","noteNumbers","concat","matchAll","m","splitABC","sharp","flat","match","isLowercase","octaveUp","octaveDown","number","abc2MIDI","NotesMatcher","matchEvent","hitEvent","missEvent","reset","matchOneByOne","includes","hasChord","_matched","_missed","allMatched","arraysMatch","notesToMatch","filter","matchedActiveNotes","matched","a","b","every","ea","bindLast","fn","that","args","callArgs","call","sampleArray","array","Math","floor","random","Game","on","handleActiveNotes","exercises","_hit","_miss","exercise","showStaveABC","showGrandStave","matcher","miss","setActiveNotes","nextExerciseAwaits","nextExercise","onmidimessage","handleMidiMessage","handleMidiConnect","type","checked","handleLessonChange","Stave","handleKeyboard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e8febc6.chunk.js","sourcesContent":["import React from 'react';\nimport { Piano, KeyboardShortcuts, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\n\nexport default function PianoKeyboard(props) {\n\n    // 61 key keyboard\n    const firstNote = MidiNumbers.fromNote('c2');\n    const lastNote = MidiNumbers.fromNote('c7');\n    const keyboardShortcuts = KeyboardShortcuts.create({\n        firstNote: MidiNumbers.fromNote('c4'),\n        lastNote: lastNote,\n        keyboardConfig: KeyboardShortcuts.HOME_ROW,\n    });\n\n    return (\n        <div className=\"piano-container\">\n            <Piano className=\"test\"\n                noteRange={{ first: firstNote, last: lastNote }}\n                playNote={props.playNote}\n                stopNote={props.stopNote}\n                width={props.width}\n                keyWidthToHeight={0.2}\n                keyboardShortcuts={keyboardShortcuts}\n                activeNotes={props.activeNotes}\n            />\n        </div>\n    );\n}","import React from 'react';\n\nclass MidiSelector extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: null,\n            options: []\n        };\n\n        navigator.requestMIDIAccess().then(this.gainAccess.bind(this));\n        this.handleChange = this.handleChange.bind(this);\n        this.connect = this.connect.bind(this);\n    }\n\n    gainAccess(access) {\n        this.setInputs(access.inputs);\n        const self = this;\n        access.onstatechange = function(e) {\n            console.log(e.port.name, e.port.manufacturer, e.port.state);\n            self.setInputs(access.inputs);\n        };\n    }\n\n    setInputs(inputs) {\n        this.inputs = inputs;\n\n        const options = [];\n        for (let input of inputs.values()) {\n            options.push({\n                key: input.id,\n                value: input.id,\n                text: input.name\n            });\n        }\n\n        this.setState({options});\n    }\n\n    connect() {\n        this.props.onConnect(this.getSelectedInput());\n    }\n\n    getSelectedInput() {\n        for(let input of this.inputs.values()) {\n            if(input.id === this.state.value) {\n                return input;\n            }\n        }\n        return null;\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    createSelectItems() {\n        let items = [];\n        this.state.options.forEach(opt => {\n            items.push(<option key={opt.key} value={opt.value}>{opt.text}</option>);\n        });\n        return items;\n    }\n\n    render() {\n        return (\n            <div>\n                <select defaultValue=\"label\" onChange={this.handleChange}>\n                    <option value=\"label\" disabled>Select midi device</option>\n                    {this.createSelectItems()}\n                </select>\n                <button onClick={this.connect}>Connect</button>\n            </div>\n        )\n    }\n\n}\n\nexport default MidiSelector;","import React from 'react';\n\nimport './Lessons.css'\n\nfunction LessonListItem({lesson, selected, onClick}) {\n    return (\n    <div className={`lesson ${selected ? \"selected\" : \"\"}`}\n        onClick={() => {onClick(lesson)}}>\n\n        <div className=\"wrapper\">\n            <h4>{lesson.heder}</h4>\n            <div>{lesson.subtitle}</div>\n        </div>\n    </div>\n    );\n}\n\nexport default function LessonsList({selectedLesson, lessons, onSelect}) {\n\n    const $lessons = lessons.map((lesson, index) =>\n\n        <LessonListItem key={index}\n            lesson={lesson}\n            selected={lesson === selectedLesson}\n            onClick={() => {onSelect(lesson);}} />\n\n    );\n\n    return (\n        <div className=\"lessons\">\n            {$lessons}\n        </div>\n    );\n}\n","export default class CEvent {\n    constructor() {\n        this.listeners = [];\n    }\n\n    on(listener) {\n        this.listeners.push(listener);\n    }\n\n    off(listener) {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            this.listeners.splice(index, 1);\n        }\n    }\n\n    fire(...data) {\n        this.listeners.forEach(l => l(...data));\n    }\n};","import Event from './CustomEvent';\n\nconst NOTES = ['C', '^C', 'D', '^D', 'E', 'F', '^F', 'G', '^G', 'A', '^A', 'B'];\n\nexport function midi2ABC(key) {\n    const octave = (key / 12 | 0) - 5;\n    const note = key % 12;\n\n    const char = NOTES[note];\n\n    if (octave === 0) {\n        return char;\n    }\n    if (octave === 1) {\n        return char.toLowerCase();\n    }\n    if (octave > 1) {\n        return char.toLowerCase() + \"'\".repeat(octave - 1);\n    }\n    if (octave < 0) {\n        return char + \",\".repeat(octave * -1);\n    }\n\n    return null;\n}\n\nexport function activeNotesAsABC(notes, chord) {\n    let activeAbc = \"\";\n\n    if (notes) {\n        notes.forEach(n => {\n            activeAbc += midi2ABC(n);\n        });\n    }\n\n    if (activeAbc && chord) {\n        activeAbc = '[' + activeAbc + ']';\n    }\n\n    return activeAbc;\n}\n\nexport default class NotesState {\n    constructor() {\n        this.activeNotes = [];\n        this.stateChangeEvent = new Event();\n    }\n\n    addNote(note) {\n        const index = this.activeNotes.indexOf(note);\n        if (index < 0) {\n            this.activeNotes.push(note);\n        }\n\n        this.stateChangeEvent.fire(this.activeNotes);\n    }\n\n    removeNote(note) {\n        const index = this.activeNotes.indexOf(note);\n        if (index > -1) {\n            this.activeNotes.splice(index, 1);\n        }\n\n        this.stateChangeEvent.fire(this.activeNotes);\n    }\n\n    handleMidiMessage(msg) {\n        const data = msg.data;\n\n        const command = data[0];\n        const note = data[1];\n        // const velocity = (data.length > 2) ? data[2] : 0;\n\n        if (command === 144) {\n            this.addNote(note);\n        }\n\n        if (command === 128) {\n            this.removeNote(note);\n        }\n    }\n\n    handleKeyboard(note, off) {\n        if (!off) {\n            this.addNote(note);\n        }\n        else {\n            this.removeNote(note);\n        }\n    }\n}","import React from 'react';\nimport Abcjs from 'react-abcjs';\n\nimport {activeNotesAsABC} from '../util/Notes'\n\nfunction isDoubleVoices(voices) {\n    return voices.some(v => v.clef === 'bass')\n        && voices.some(v => (v.clef || 'treble') === 'treble' )\n}\n\nexport default function(props) {\n\n    let abc;\n    let activeVoice;\n\n    const {\n        key,\n        system\n    } = props;\n\n    let {clef, grandStave} = props;\n    if (!clef && system.length === 1) {\n        clef = system[0].clef || 'treble';\n    }\n\n    const bothClefs = isDoubleVoices(system);\n\n    if (bothClefs) {\n        grandStave = true;\n    }\n\n    const trebleVoice = system.find( v => (v.clef || clef) === 'treble' );\n    const bassVoice = system.find( v => (v.clef || clef) === 'bass' );\n    const voice = (trebleVoice || bassVoice);\n\n    let activeAbc = props.activeABC || activeNotesAsABC(props.activeNotes);\n\n    if (grandStave) {\n        const activeTreble = clef === 'bass' ? '' : activeAbc;\n        let trebleLine = trebleVoice ? trebleVoice.abc : '';\n        if (trebleVoice && activeTreble) {\n            trebleLine += '&';\n            activeVoice = 1;\n        }\n        trebleLine += activeTreble;\n\n        const activeBase = clef === 'bass' ? activeAbc : '';\n        let bassLine = bassVoice ? bassVoice.abc : '';\n        if (bassVoice && activeBase) {\n            bassLine += '&';\n            activeVoice = 2;\n        }\n        bassLine += activeBase;\n\n        if (!activeAbc) {\n            // Add empty overlay chord to have consistent placing\n            // of elements, otherwise left padding changes,\n            // when you have active notes\n            bassLine += \" & []\"\n        }\n\n        abc = `\n            K: ${key || ''} clef=${clef || 'treble'}\n            L:1/4\n            M:4/4\n            %%staves {V1 V2}\n            V: V1 clef=treble\n            V: V2 clef=bass\n            [V: V1]|| ${trebleLine}\n            [V: V2]|| ${bassLine}\n        `;\n    }\n    else {\n        let line = voice ? voice.abc : '';\n        if (line && activeAbc) {\n            line += '&';\n            activeVoice = 1;\n        }\n        line += activeAbc;\n\n        if(!activeAbc) {\n            line += ' & []';\n        }\n\n        abc = `\n            K: ${key || ''} clef=${clef || 'treble'}\n            L:1/4\n            M:4/4\n            || ${line}\n        `;\n    }\n\n    const activeAbcFill = props.activeAbcFill || \"#3AC8DA\";\n\n    return (\n        <div className=\"stave-container\">\n            <style jsx=\"true\">{`\n                path.abcjs-note.abcjs-v${activeVoice} {\n                    fill: ${activeAbcFill};\n                }\n            `}\n            </style>\n            <Abcjs\n                abcNotation={abc}\n                parserParams={{}}\n                engraverParams={{ responsive: 'none', add_classes: true }}\n                renderParams={{ viewportHorizontal: true }}\n            />\n            { props.renderABC && (<div style={{whiteSpace: 'pre'}}>{abc}</div>)}\n        </div>\n    )\n}\n\n","\nfunction abcMapper(opts) {\n    return abc => {\n        return {\n            system: [{...opts, abc: abc}]\n        }\n    };\n}\n\nconst LESSONS = [{\n    heder: \"Treble clef\",\n    subtitle: \"Markers (C G)\",\n    grandStave: false,\n    createExercises: () => \"C G c g c' G,\".split(' ').map(abcMapper({clef: 'treble'}))\n}, {\n    heder: \"Bass clef\",\n    subtitle: \"Markers (C F)\",\n    grandStave: false,\n    createExercises: () => \"C,, F,, C, F, C F c\".split(' ').map(abcMapper({clef: 'bass'}))\n}, {\n    heder: \"Treble clef\",\n    subtitle: \"Full\",\n    grandStave: false,\n    createExercises: () => \"G, A B C D E F G a b c d e f g'\".split(' ').map(abcMapper({clef: 'treble'}))\n}, {\n    heder: \"Chords\",\n    subtitle: \"One Four Five\",\n    grandStave: false,\n    createExercises: () => [\"[C E G]\", \"C E G\", \"[F A c]\"].map(abcMapper({clef: 'treble'}))\n}];\n\nexport { LESSONS }","import CEvent from \"./CustomEvent\";\nimport { activeNotesAsABC } from \"./Notes\";\n\nconst ABC_NOTE_REGEXP = /([_^]?[abcdefgABCDEFG]{1}[,']*)/g;\n\nexport function abc2MIDI(abc) {\n    const sharp = (abc.indexOf('^') > -1);\n    const flat  = (abc.indexOf('_') > -1);\n\n    const note = abc.match(/[ABCDEFGabcdefg]/)[0];\n    const isLowercase = note.toLowerCase() === note;\n\n    const octaveUp   = abc.match(/[']+/) ? abc.match(/[']+/)[0].length : 0;\n    const octaveDown = abc.match(/[,]+/) ? abc.match(/[,]+/)[0].length : 0;\n\n    let number = ['c', 'c', 'd', 'd', 'e', 'f', 'f', 'g', 'g', 'a', 'a', 'b'].indexOf(note.toLowerCase());\n\n    if (sharp) {\n        number ++;\n    }\n\n    if (flat) {\n        number ++;\n    }\n\n    if (isLowercase) {\n        number += 12;\n    }\n\n    number += 12 * octaveUp;\n    number -= 12 * octaveDown;\n\n    number += 12 * 5;\n\n    return number;\n}\n\nexport function system2MIDINotes(system) {\n    let noteNumbers = [];\n\n    if(system) {\n        system.forEach(line => {\n            noteNumbers = noteNumbers.concat(abc2Notes(line.abc));\n        });\n    }\n\n    return noteNumbers;\n}\n\nexport function splitABC(abc) {\n    return [...abc.matchAll(ABC_NOTE_REGEXP)].map(m => m[0]);\n}\n\nexport function abc2Notes(abc) {\n    return splitABC(abc).map(n => abc2MIDI(n));\n}\n\nexport default class NotesMatcher {\n    constructor(system) {\n\n        this.matchEvent = new CEvent();\n        this.hitEvent = new CEvent();\n        this.missEvent = new CEvent();\n\n        this.reset(system);\n    }\n\n    reset(system) {\n        this.system = system;\n        this.notes = system2MIDINotes(this.system);\n\n        this.matchOneByOne = !hasChord(this.system);\n\n        this._matched = [];\n        this._missed = [];\n    }\n\n    setActiveNotes(activeNotes) {\n\n        // If we are matching chord,\n        // all of the chord notes should be pressed\n        // at once.\n        // So we don't keep state ( this._matched )\n        if (!this.matchOneByOne) {\n            this._matched = [];\n        }\n\n        let allMatched = arraysMatch(this.notes, this._matched);\n\n        // We already have match, but state haven't\n        // been reset yet\n        if (allMatched) {\n            this.matchEvent.fire(this.notes);\n        }\n\n        // Notes which haven't been matched yet\n        let notesToMatch = this.notes.filter(n => !this._matched.includes(n));\n\n        // I we are matching notes one by one,\n        // take the next one after matched\n        if (this.matchOneByOne && !allMatched) {\n            if (this.notes.length > 0 && this._matched.length < this.notes.length) {\n                notesToMatch = [this.notes[this._matched.length]]\n            }\n        }\n\n        this._missed = activeNotes.filter(n => !notesToMatch.includes(n));\n\n        if (this._missed.length !== 0) {\n            this.missEvent.fire(this._missed);\n        }\n\n        const matchedActiveNotes = activeNotes.filter(n => notesToMatch.includes(n));\n        if (!allMatched && matchedActiveNotes.length > 0) {\n            this.hitEvent.fire(matchedActiveNotes);\n        }\n\n        // Update inner state\n        matchedActiveNotes.forEach(n => this._matched.push(n));\n\n        console.log(this.notes, this._matched);\n\n        allMatched = arraysMatch(this.notes, this._matched);\n        if (allMatched && this._missed.length === 0) {\n            this.matchEvent.fire(this._matched);\n        }\n    }\n\n    activeNotesAsABC(activeNotes) {\n        return activeNotesAsABC(activeNotes, !this.matchOneByOne);\n    }\n\n    match(activeNotes) {\n        let matched = [];\n\n        // All active notes are in lesson notes\n        for (let n of activeNotes) {\n            if(this.notes.indexOf(n) >= 0) {\n                matched.push(n);\n            }\n        }\n\n        // All notes are matched\n        return matched.length === activeNotes.length\n            && matched.length === this.notes.length;\n    }\n}\n\nfunction arraysMatch(a, b) {\n    return a.length === b.length && a.every(ea => b.includes(ea));\n}\n\nfunction hasChord(system) {\n    return system.some(line => line.abc.includes(\"[\") )\n}\n","import React from 'react'\n\nimport PianoKeyboard from './PianoKeyboard';\nimport MidiSelector from './MidiSelector';\nimport LessonsList from './LessonsList'\nimport Stave from './Stave'\n\nimport { LESSONS } from '../lessons/lessons'\n\nimport NotesState from '../util/Notes'\nimport NotesMatcher from '../util/NotesMatcher'\n\nfunction bindLast(fn, that, ...args) {\n    return function(...callArgs) {\n        fn.call(that, ...callArgs, ...args);\n    }\n}\n\nfunction sampleArray(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport default class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.notes = new NotesState();\n        this.notes.stateChangeEvent.on(this.handleActiveNotes.bind(this));\n\n        const lesson = LESSONS[0];\n\n        const exercises = lesson.createExercises();\n\n        this._hit = 0;\n        this._miss = 0;\n\n        this.state = {\n            lesson,\n\n            activeNotes: [],\n            activeABC: '',\n\n            exercises,\n            exercise: sampleArray(exercises),\n\n            showStaveABC: false,\n            showGrandStave: false\n        };\n\n        this.matcher = new NotesMatcher(this.state.exercise.system);\n\n        this.matcher.matchEvent.on(this.match.bind(this));\n        this.matcher.missEvent.on(this.miss.bind(this));\n    }\n\n    handleActiveNotes(activeNotes) {\n        this.matcher.setActiveNotes(activeNotes);\n\n        const activeABC = this.matcher.activeNotesAsABC(activeNotes);\n        this.setState({\n            activeNotes: activeNotes,\n            activeABC: activeABC\n        });\n\n\n        if (activeNotes.length === 0 && this.nextExerciseAwaits) {\n            this.nextExercise();\n        }\n    }\n\n    handleMidiConnect(input) {\n        if (input) {\n            const notes = this.notes;\n            input.onmidimessage = notes.handleMidiMessage.bind(notes);\n        }\n    }\n\n    handleLessonChange(lesson) {\n        const exercises = lesson.createExercises();\n        const exercise = sampleArray(exercises);\n\n        const state = {\n            lesson,\n            exercise,\n            exercises\n        };\n\n        this.setState(state);\n\n        this.matcher.reset(exercise.system);\n\n        this._hit = 0;\n        this._miss = 0;\n    }\n\n    match() {\n        if (!this.nextExerciseAwaits) {\n            this._hit ++;\n            this.nextExerciseAwaits = true;\n        }\n    }\n\n    miss() {\n        if (!this.nextExerciseAwaits) {\n            this._miss ++;\n        }\n    }\n\n    nextExercise() {\n        this.nextExerciseAwaits = false;\n        const exercise = sampleArray(this.state.exercises);\n        this.setState({exercise});\n        this.matcher.reset(exercise.system);\n    }\n\n    render() {\n        return (\n            <div id=\"game\">\n                <MidiSelector onConnect={this.handleMidiConnect.bind(this)}/>\n                <div>\n                    Hit: {this._hit}, Miss: {this._miss},\n                    &nbsp;<input\n                        type=\"checkbox\"\n                        onChange={e => {this.setState({showStaveABC:e.target.checked});}}></input>\n                    &nbsp;<label>Show stave ABC</label>\n                    &nbsp;<input\n                        type=\"checkbox\"\n                        onChange={e => {this.setState({showGrandStave:e.target.checked});}}></input>\n                        &nbsp;<label>Show Grand Stave</label>\n                </div>\n\n                <LessonsList selectedLesson={this.state.lesson} lessons={LESSONS}\n                    onSelect={this.handleLessonChange.bind(this)} />\n\n                <Stave\n                    activeABC={this.state.activeABC}\n                    activeAbcFill={this.nextExerciseAwaits ? \"#30C72C\" : \"#3AC8DA\"}\n                    grandStave={this.state.lesson.grandStave || this.state.showGrandStave}\n                    system={this.state.exercise.system}\n                    renderABC={this.state.showStaveABC}/>\n\n                <div>\n                    <button style={{\"width\": \"100px\"}} onClick={this.nextExercise.bind(this)} >Skip</button>\n                </div>\n\n                <PianoKeyboard width={1600}\n                    activeNotes={this.state.activeNotes}\n                    playNote={bindLast(this.notes.handleKeyboard, this.notes, false)}\n                    stopNote={bindLast(this.notes.handleKeyboard, this.notes, true)}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport Game from './components/Game'\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}